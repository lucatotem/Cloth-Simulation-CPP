#ifndef NGLSCENE_H_
#define NGLSCENE_H_

#include <ngl/Transformation.h>
#include "WindowParams.h"
#include "CollisionObj.h"
#include "ClothMesh.h"
#include <QOpenGLWidget>
#include <memory>

//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief a basic Qt GL window class for ngl demos
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/10/10
/// Revision History :
/// Initial Version 10/10/10 (Binary day ;-0 )
/// @class GLWindow
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------
class NGLScene : public QOpenGLWidget
{
Q_OBJECT        // must include this if you use Qt signals/slots
public :
	//----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor for GLWindow
	/// @param[in] _timer the time value for simulation updates
  /// @param [in] _parent the parent window to create the GL context in
	//----------------------------------------------------------------------------------------------------------------------
	NGLScene(int _timer,QWidget *_parent );
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief dtor
	//----------------------------------------------------------------------------------------------------------------------
	~NGLScene();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief set the mesh to use
	/// @param[in] _m the mesh
	//----------------------------------------------------------------------------------------------------------------------
	void setMesh(ClothMesh* _m){ m_mesh.reset(_m); }
	//void setObj(CollisionObj* _o) { m_collObj.reset(_o); }
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief start the simulation timer
	//----------------------------------------------------------------------------------------------------------------------
	void startSimTimer();
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief stop the simulation timer
	//----------------------------------------------------------------------------------------------------------------------
	void stopSimTimer();
	void setTimerbool(bool _timeractive) { m_timeractive = _timeractive; }

public slots :
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief set the timer duration value
	/// @param[in] _v the timer value in ms
	//----------------------------------------------------------------------------------------------------------------------
	inline void setTimerDuration(int _v){m_timerValue=_v;}



private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the windows params such as mouse and rotations etc
  //----------------------------------------------------------------------------------------------------------------------
  WinParams m_win;
  //----------------------------------------------------------------------------------------------------------------------
	/// @brief the timer
	//----------------------------------------------------------------------------------------------------------------------
	int m_timer;

	bool m_timeractive;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief used to store the global mouse transforms
	//----------------------------------------------------------------------------------------------------------------------
	ngl::Mat4 m_mouseGlobalTX;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief Our Camera
	//----------------------------------------------------------------------------------------------------------------------
	ngl::Mat4 m_view;
	ngl::Mat4 m_project;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief transformation stack for the gl transformations etc
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief our transformation stack used for drawing
	//----------------------------------------------------------------------------------------------------------------------
	ngl::Transformation m_transform;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief our spring pointer
	//----------------------------------------------------------------------------------------------------------------------
	std::unique_ptr<ClothMesh> m_mesh;
	//std::unique_ptr<CollisionObj> m_collObj;
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief the timer value in ms
	//----------------------------------------------------------------------------------------------------------------------
	int m_timerValue;
protected:

	//----------------------------------------------------------------------------------------------------------------------
	/// @brief  The following methods must be implimented in the sub class
	/// this is called when the window is created
	//----------------------------------------------------------------------------------------------------------------------
	void initializeGL();

	//----------------------------------------------------------------------------------------------------------------------
	/// @brief this is called whenever the window is re-sized
	/// @param[in] _w the width of the resized window
	/// @param[in] _h the height of the resized window
	//----------------------------------------------------------------------------------------------------------------------
	void resizeGL(int _w , int _h);
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief this is the main gl drawing routine which is called whenever the window needs to
	/// be re-drawn
	//----------------------------------------------------------------------------------------------------------------------
	void paintGL();

private :
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief this method is called every time a mouse is moved
	/// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mouseMoveEvent ( QMouseEvent * _event );
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief this method is called everytime the mouse button is pressed
	/// inherited from QObject and overridden here.
	/// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mousePressEvent ( QMouseEvent *_event );
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief this method is called everytime the mouse button is released
	/// inherited from QObject and overridden here.
	/// @param _event the Qt Event structure
	//----------------------------------------------------------------------------------------------------------------------
	void mouseReleaseEvent (QMouseEvent *_event );
	//----------------------------------------------------------------------------------------------------------------------
	/// @brief timer event trigered by startTimer
	//----------------------------------------------------------------------------------------------------------------------
	void timerEvent(QTimerEvent *_event	);
	void loadMatricesToShader();
	void loadMatricesToColourShader();

};

#endif
